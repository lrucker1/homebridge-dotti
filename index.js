// Lots of credit to https://github.com/SFrost007/homebridge-superlights

var Service, Characteristic, DottiIcon;
var Noble = require('noble')
var dotti = require('./dotti')
//var storage = require('node-persist')
var inherits = require('util').inherits;

var DottiServiceUuid = "0000fff000001000800000805f9b34fb";
var DottiCharacteristicUuid = "0000fff300001000800000805f9b34fb";
var DottiShortCharacteristicUuid = "fff3";

module.exports = function(homebridge) {
  console.log("homebridge API version: " + homebridge.version);

  // Service and Characteristic are from hap-nodejs
  Service = homebridge.hap.Service;
  Characteristic = homebridge.hap.Characteristic;

    // UUID generated by Homekit simulator.
	DottiIcon = function() {
      Characteristic.call(this, 'DottiIcon', '219D8995-2CA4-4A8C-9703-6044AB6ECA25');
      this.setProps({
        format: Characteristic.Formats.UINT8,
        maxValue: 8,
        minValue: 0,
        minStep: 1,
        perms: [Characteristic.Perms.READ, Characteristic.Perms.WRITE]
      });
      this.value = this.getDefaultValue();
    };
	inherits(DottiIcon, Characteristic);

	homebridge.registerAccessory("homebridge-dotti", "Dotti", DottiAccessory);
}


function DottiAccessory(log, config) {
    this.log = log;
    this.name = config["name"];
    this.address = config["address"];
    this.lightService = new Service.Lightbulb(this.name);
    this.lightService
        .getCharacteristic(Characteristic.On) // BOOL
        .on('set', this.setPowerState.bind(this))
        .on('get', this.getPowerState.bind(this));

    this.lightService
        .addCharacteristic(new Characteristic.Brightness()) // INT (0-100)
        .on('set', this.setBrightness.bind(this))
        .on('get', this.getBrightness.bind(this));

    this.lightService
        .addCharacteristic(new Characteristic.Saturation()) // FLOAT (0-100)
        .on('set', this.setSaturation.bind(this))
        .on('get', this.getSaturation.bind(this));

    this.lightService
        .addCharacteristic(new Characteristic.Hue()) // FLOAT (0-360)
        .on('set', this.setHue.bind(this))
        .on('get', this.getHue.bind(this));

    this.lightService
        .addCharacteristic(DottiIcon) // INT (0-7)
        .on('set', this.setIcon.bind(this))
        .on('get', this.getIcon.bind(this))

    // The device is read only; set some reasonable defaults.
    this.hue = 24;
    this.saturation = 100;
    this.brightness = 100;
    this.icon = 1;
/*
    storage.init({
        logging: true,
        ttl: ttl
    }).then(function() {
        return storage.getItem('icon');
    }).then(function(icon) {
        if (icon) {
            this.icon = icon;
        } else {
            storage.setItemSync('icon', this.icon);
        }
    }).catch(function(err) {
        console.error(err);
        throw err;
    });
*/

    /**
     * Initialise the Noble service for talking to the bulb
     **/
    this.nobleCharacteristic = null;
    this.dottiDevice = null;
    Noble.on('stateChange', this.nobleStateChange.bind(this));

    // Array for keeping track of callback objects.
    // A UI that doesn't coalesce events can kill response time.
    // Skip all but the last change.
    this.rgbCallbacks = [];
    this.iconCallbacks = [];
    this.pendingIcon = null;
    this.pendingRGB = null;

    // Wrapper for storing previous values before running 'identify' flash
    this.preIdentifyValues = {};
}

DottiAccessory.prototype.getServices = function() {
    return [this.lightService];
}


/**
 * Getters/setters for publicly exposed characteristics for the bulb
 **/
DottiAccessory.prototype.setPowerState = function(powerState, callback) {
    if (this.dottiDevice == null) {
        this.log.warn("Device not yet found. Skipping..");
        callback();
        return;
    }
    this.dottiDevice.toggleOnOff(powerState, function(err) {
        callback(err);
    });
}

/*
 * The "favorite icon" range is 0-7. Shift it up so we can use 0 as "off",
 * which is really just "no lit pixels"
 */
DottiAccessory.prototype.loadIcon = function(value, callback) {
    this.icon = value;
    //storage.setItem('icon', value);
    if (value == 0) {
        this.dottiDevice.toggleOnOff(false, function(err) {
            callback(err);
        });
    } else {
        this.dottiDevice.loadFavoriteIcon(value - 1, function(err) {
            callback(err);
        });
    }
}

// Coalesce writes because UIs sometimes fail to.
DottiAccessory.prototype.setIcon = function(value, callback) {
    this.log.info("setIcon: " + value);
    if (this.dottiDevice == null) {
        this.log.warn("Device not yet found. Skipping..");
        callback();
        return;
    }
    this.iconCallbacks.push(callback)
    if (this.iconCallbacks.length > 1) {
        this.log.debug("Outstanding 'setIcon' request already active."
            + " Adding callback to queue. (" + this.iconCallbacks.length + ")");
        this.pendingIcon = value;
    } else {
        this.log.debug("Set icon: " +value+") ");

        accessory = this;
        this.loadIcon(value, function(err) {
            // Send the last one we missed.
            if (accessory.pendingIcon != null) {
                accessory.loadIcon(this.pendingIcon);
                accessory.pendingIcon = null;
            }
            accessory.log.debug("Sending result to " + accessory.iconCallbacks.length + " queued callbacks");
            accessory.iconCallbacks.forEach(function(queuedCallback, index) {
                queuedCallback(err);
            });
            accessory.log.debug("Clearing callback queue");
            accessory.iconCallbacks = [];
        })
    }
}


DottiAccessory.prototype.setBrightness = function(value, callback) {
    this.log.info("setBrightness: " + value);
    this.brightness = value;
    this.writeColor(function(){
        callback();
    });
}

DottiAccessory.prototype.setSaturation = function(value, callback) {
    this.log.info("setSaturation: " + value);
    this.saturation = value;
    this.writeColor(function(){
        callback();
    });
}

DottiAccessory.prototype.setHue = function(value, callback) {
    this.log.info("setHue: " + value);
    this.hue = value;
    this.writeColor(function(){
        callback();
    });
}

// Coalesce RGB writes because UIs sometimes fail to.
DottiAccessory.prototype.writeColor = function(callback) {
    if (this.dottiDevice == null) {
        this.log.warn("Characteristic not yet found. Skipping..");
        callback(false);
        return;
    }
    this.rgbCallbacks.push(callback)
    var rgb = this.hsv2rgb(this.hue, this.saturation, this.brightness);
    if (this.rgbCallbacks.length > 1) {
        this.log.debug("Outstanding 'writeColor' request already active."
            + " Adding callback to queue. (" + this.rgbCallbacks.length + ")");
        this.pendingRGB = rgb;
    } else {
        this.log.debug("Set: "
            + "hsv("+this.hue+","+this.saturation+","+this.brightness+") "
            + "= rgb("+rgb.r+","+rgb.g+","+rgb.b+") ");

        accessory = this;
        this.dottiDevice.showRGB(rgb, function(err) {
            // Send the last one we missed.
            if (accessory.pendingRGB != null) {
                accessory.dottiDevice.showRGB(this.pendingRGB);
                accessory.pendingRGB = null;
            }
            accessory.log.debug("Sending result to " + accessory.rgbCallbacks.length + " queued callbacks");
            accessory.rgbCallbacks.forEach(function(queuedCallback, index) {
                queuedCallback(err);
            });
            accessory.log.debug("Clearing callback queue");
            accessory.rgbCallbacks = [];
        })
    }
}

// Power doesn't really apply
DottiAccessory.prototype.getPowerState = function(callback) {
    if (this.dottiDevice == null) {
        this.log.warn("Device not yet found. Skipping..");
        callback(null, false);
        return;
    }
    callback(null, true);
}

// Dotti is write-only. Return the cached state.
// The UIs won't let you change a write-only value if it can't read something.
DottiAccessory.prototype.getIcon = function(callback) {
    if (this.dottiDevice == null) {
        this.log.warn("Device not yet found. Skipping..");
        callback(false);
        return;
    }
    callback(null, this.icon);
/*
    storage.getItem('icon').then(function(icon) {
        callback(null, icon);
    }).catch(function(err) {
        callback(err);
    });
*/
}

DottiAccessory.prototype.getBrightness = function(callback) {
    this.log.debug("getBrightness called");
    if (this.dottiDevice == null) {
        this.log.warn("Device not yet found. Skipping..");
        callback(null);
        return;
    }
    callback(null, this.brightness);
}

DottiAccessory.prototype.getSaturation = function(callback) {
    this.log.debug("getSaturation called");
    if (this.dottiDevice == null) {
        this.log.warn("Device not yet found. Skipping..");
        callback(null);
        return;
    }
    callback(null, this.saturation);
}

DottiAccessory.prototype.getHue = function(callback) {
    this.log.debug("getHue called");
    if (this.dottiDevice == null) {
        this.log.warn("Device not yet found. Skipping..");
        callback(null);
        return;
    }
    callback(null, this.hue);
}


/**
 * Noble discovery callbacks
 **/

DottiAccessory.prototype.scanForDotti = function() {
	Noble.startScanning([DottiServiceUuid], false);
}

DottiAccessory.prototype.nobleStateChange = function(state) {
    if (state == "poweredOn") {
        this.log.info("Starting Noble scan..");
        this.scanForDotti();
        Noble.on("discover", this.nobleDiscovered.bind(this));
    } else {
        this.log.info("Noble state change to " + state + "; stopping scan.");
        Noble.stopScanning();
    }
}

DottiAccessory.prototype.nobleDiscovered = function(accessory) {
    if (this.address != null && accessory.address != this.address) {
        this.log.info("Found accessory " + accessory.id + ", address " + accessory.address + ", expected " + this.address + ". Skipping...");
        return;
    }
    this.log.info("Found accessory " + accessory.id + ", address " + accessory.address + ", connecting..");
    accessory.connect(function(error){
        this.nobleConnected(error, accessory);
    }.bind(this));
}


DottiAccessory.prototype.nobleConnected = function(error, accessory) {
    if (error) return this.log.error("Noble connection failed: " + error);
    Noble.stopScanning();
    this.log.info("Connection success, discovering services..");
    // discoverServices is broken. Just fetch everything, there's not that much of it.
    accessory.discoverAllServicesAndCharacteristics(this.nobleCharacteristicsDiscovered.bind(this));
    accessory.on('disconnect', function(error) {
        this.nobleDisconnected(error, accessory);
    }.bind(this));
}

DottiAccessory.prototype.nobleDisconnected = function(error, accessory) {
    this.log.info("Disconnected from " + accessory.address + ": " + (error ? error : "(No error)"));
    accessory.removeAllListeners('disconnect');
    this.nobleCharacteristic = null;
    this.dottiDevice = null;
    this.log.info("Restarting Noble scan..");
    this.scanForDotti();
}

DottiAccessory.prototype.nobleCharacteristicsDiscovered = function(error, services, characteristics) {
    if (error) return this.log.error("Noble characteristic discovery failed: " + error);
    for (var characteristic of characteristics) {
        if (characteristic.uuid == DottiShortCharacteristicUuid) {
            this.log.info("Found RGB Characteristic: " + characteristic.uuid);
            this.nobleCharacteristic = characteristic;
            this.dottiDevice = new dotti.Dotti(characteristic, this.log);
            // Uncomment this if you aren't sure you're reaching it.
            // DEBUG: this.dottiDevice.loadFavoriteIcon(1, null);
        }
    }
}

DottiAccessory.prototype.identify = function(callback) {
    this.log("Identify requested, flashing red -> green -> blue");
    // Since these are write-only values, we can only guess at what we last saw.
    this.preIdentifyValues = {
        icon: this.icon
    };
    this.flash(255,0,0,500, function(){
        this.flash(0,255,0,500, function(){
            this.flash(0,0,255,500, function(){
                this.setIcon(this.preIdentifyValues.icon, function(){
                    callback(null);
                }.bind(this));
            }.bind(this));
        }.bind(this));
    }.bind(this));
}

DottiAccessory.prototype.flash = function(r,g,b,duration,callback) {
    if (this.dottiDevice == null) {
        this.log.warn("Characteristic not yet found. Skipping..");
        callback(false);
        return;
    }
    var rgb = {r: r, g: g, b: b };
    this.dottiDevice.showRGB(rgb, function(){
        setTimeout(function(){
            callback();
        }, duration);
    });
}

// From https://gist.github.com/eyecatchup/9536706
DottiAccessory.prototype.hsv2rgb = function(h, s, v) {
        var r, g, b;
        var i;
        var f, p, q, t;

        // Make sure our arguments stay in-range
        h = Math.max(0, Math.min(360, h));
        s = Math.max(0, Math.min(100, s));
        v = Math.max(0, Math.min(100, v));

        // We accept saturation and value arguments from 0 to 100 because that's
        // how Photoshop represents those values. Internally, however, the
        // saturation and value are calculated from a range of 0 to 1. We make
        // That conversion here.
        s /= 100;
        v /= 100;

        if(s == 0) {
                // Achromatic (grey)
                r = g = b = v;
                return {
                        r: Math.round(r * 255),
                        g: Math.round(g * 255),
                        b: Math.round(b * 255)
                };
        }

        h /= 60; // sector 0 to 5
        i = Math.floor(h);
        f = h - i; // factorial part of h
        p = v * (1 - s);
        q = v * (1 - s * f);
        t = v * (1 - s * (1 - f));

        switch(i) {
                case 0: r = v; g = t; b = p; break;
                case 1: r = q; g = v; b = p; break;
                case 2: r = p; g = v; b = t; break;
                case 3: r = p; g = q; b = v; break;
                case 4: r = t; g = p; b = v; break;
                default: r = v; g = p; b = q;
        }

        return {
                r: Math.round(r * 255),
                g: Math.round(g * 255),
                b: Math.round(b * 255)
        };
}
